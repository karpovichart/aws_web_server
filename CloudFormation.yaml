AWSTemplateFormatVersion: "2010-09-09"
#Parameters:
#  VPCSecurityGroups:
#    Type: List<AWS::EC2::SecurityGroup::Id>
#    Description: The list of security groups to associate with this instance
#Parameters:
#  DBPASS:
#    Type: String
#    Description: postgres password
#    Default: "qwerty123"

Resources:
  WebAutoscalling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: 1
      MinSize: 1
     # InstanceId: !Ref WebInstance
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnet
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      KeyName: frank
      IamInstanceProfile: !Ref RoleToInstance
      ImageId: ami-04932daa2567651e7
      SecurityGroups:
        - !Ref WebSecurityGroup
      UserData:
        Fn::Base64: !Sub
          "#!/bin/bash \n
          sudo apt update -y \n
          sudo sudo apt install apt-transport-https ca-certificates curl software-properties-common -y \n
          echo '2' \n
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \n
          echo '3' \n
          sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" \n
          echo '4' \n
          sudo apt update -y \n
          echo '5' \n
          sudo apt install docker-ce -y \n
          echo '6' \n

          sudo docker run -d  --name srv --restart always -p 8080:8080 -i karpovichart/web_srv python3 /srv/srv.py -p qwerty123 -u postgres -ho ${PostgresInstance.Endpoint.Address}  -d test"
#         sudo apt-get install awscli -y \n
#    Metadata:
#      AWS::CloudFormation::Init:
#        configSets:
#          default:
#            - config1
#        config1:
#          commands:
#            customize:
#              command: sudo docker run -d  --name srv --restart always -p 8080:8080 -i karpovichart/web_srv python3 srv.py -p qwerty123 -u postgres -ho !GetAtt PostgresInstance.Endpoint.Address  -d postgres
#              env:
#                DBHOST: !GetAtt PostgresInstance.Endpoint.Address
#                DBUSERNAME: postgres
#                DB: postgres
#                DBPASS: qwerty123

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

    Properties:
      BucketName: testbbucket31

#  WebInstance:
#    Type: AWS::EC2::Instance
#    Properties:
#      InstanceType: t2.micro
#      ImageId: ami-04932daa2567651e7
#      KeyName: frank
#      IamInstanceProfile: !Ref RoleToInstance
#      AvailabilityZone:  "eu-central-1b"
#      SecurityGroupIds:
#        - !Ref WebSecurityGroup
#      SubnetId: !Ref PublicSubnet
#      Tags:
#        - Key: Name
#          Value: webserver


#
  PostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: 11.5
      AllocatedStorage: 20
      DBInstanceClass: 'db.t2.micro'
      DBName: "test"
      DBSubnetGroupName: !Ref DBSubnetGroups
      MasterUsername: "postgres"
      MasterUserPassword: "qwerty123" #!Ref DBPASS
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId



#      DBSubnetGroupName:
#        - !Ref DBSubnetGroup


  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web server
      GroupName: web
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

#  DBSecurityGroup:
#    Type: AWS::RDS::DBSecurityGroup
#    Properties:
#      EC2VpcId: !Ref VPC
#      GroupDescription: Ingress for CIDRIP
#      DBSecurityGroupIngress:
#        EC2SecurityGroupName:
#          Ref: WebSecurityGroup
#    Properties:
#      GroupDescription: Database
#      EC2VpcId: !Ref VPC
#      DBSecurityGroupIngress: !Ref DBSecurityGroupIngress

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
          CidrIp: 0.0.0.0/0


#  DBSecurityGroupIngress:
#    Type: AWS::RDS::DBSecurityGroupIngress
#    Properties:
#       CIDRIP: 0.0.0.0/0
#       DBSecurityGroupName: !Ref WebSecurityGroup
  VPC:
    Type: AWS::EC2::VPC
    Properties:

      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
#  DBSubnetGroup:
#    Type: AWS::RDS::DBSubnetGroup
#    Properties:
#      DBSubnetGroupDescription: Subnet group for the RDS instance
#      DBSubnetGroupName: DBSubnetGroup
#      SubnetIds:
#        - !Ref PublicSubnet
#        - !Ref PrivateSubnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: Yes
      AvailabilityZone:  "eu-central-1b"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRoute
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "eu-central-1c"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private
  DBSubnetGroups:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "subnet group"
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PublicSubnet

#  PrivateRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: Private
#  PrivateRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
#  PrivateSubnetRouteTableAssociation:
#      Type: AWS::EC2::SubnetRouteTableAssociation
#      Properties:
#        SubnetId: !Ref PrivateSubnet
#        RouteTableId: !Ref PrivateRouteTable

  Ec2Role1:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: "Allow"
              Action: "s3:*"
              Resource: "*"
#      RoleName: EC2ROLE
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  RoleToInstance:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref "Ec2Role1"
